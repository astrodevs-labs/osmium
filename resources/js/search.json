[[{"l":"Welcome","p":["Welcome to our Linter Rules Documentation. Here you will find all the rules implemented in our linter."]}],[{"l":"explicit-types"},{"l":"Description","p":["Forbid or enforce explicit types (like uint256) that have an alias (like uint)."]},{"l":"Options","p":["description","default","Options need to be one of \"explicit\", \"implicit\"","explicit"]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["If explicit is selected","If implicit is selected"]},{"l":"Bad","p":["If explicit is selected","If implicit is selected","At any setting"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"function-max-lines"},{"l":"Description","p":["Function body contains \"count\" lines but allowed no more than maxlines."]},{"l":"Options","p":["description","default","Maximum allowed lines count per function","50"]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"max-line-length"},{"l":"Description","p":["Line length must be no more than maxlen."]},{"l":"Options","p":["description","default","Maximum allowed number of characters per line","120"]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"max-states-count"},{"l":"Description","p":["Contract has \"some count\" states declarations but allowed no more than maxstates."]},{"l":"Options","p":["description","default","Maximum allowed states declarations","15"]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"no-console"},{"l":"Description","p":["No console.log/logInt/logBytesX/logString/etc & No hardhat and forge-std console.sol import statements."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["No console.logX statements","No hardhat/console.sol import statements","No forge-std console.sol & console2.sol import statements"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"no-empty-block"},{"l":"Description","p":["Code block has zero statements inside. Exceptions apply."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["Empty fallback function","Empty constructor with member initialization list"]},{"l":"Bad","p":["Empty block on if statement","Empty contract","Empty block in constructor without parent initialization"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"no-global-import"},{"l":"Description","p":["Import statement includes an entire file instead of selected symbols."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["import names explicitly","import entire file into a name"]},{"l":"Bad","p":["import all members from a file","import an entire file"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"one-contract-per-file"},{"l":"Description","p":["Imported object name is not being used by the contract."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["Imported object is being used"]},{"l":"Bad","p":["Imported object is not being used"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"payable-fallback"},{"l":"Description","p":["When fallback is not payable you will not be able to receive ethers."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["Fallback is payable"]},{"l":"Bad","p":["Fallback is not payable"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"reason-string"},{"l":"Description","p":["Require or revert statement must have a reason string and check that each reason string is at most N characters long."]},{"l":"Options","p":["description","default","A JSON object with a single property \"maxLength\" specifying the max number of characters per reason string.","{\"maxLength\":32}"]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"custom-errors"},{"l":"Description","p":["Enforces the use of Custom Errors over Require and Revert statements"]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["Use Custom Errors","Use of Custom Errors with arguments"]},{"l":"Bad","p":["Use of require statement","Use of plain revert statement","Use of revert statement with message"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"const-name-snakecase"},{"l":"Description","p":["Constant name must be in capitalized SNAKE_CASE. (Does not check IMMUTABLES, use immutable-vars-naming)"]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"contract-name-camelcase"},{"l":"Description","p":["Contract name must be in CamelCase."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"event-name-camelcase"},{"l":"Description","p":["Event name must be in CamelCase."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"foundry-test-functions"},{"l":"Description","p":["Enforce naming convention on functions for Foundry test cases"]},{"l":"Options","p":["description","default","Array of function to be skipped","[]"]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["Foundry test case with correct Function declaration"]},{"l":"Bad","p":["Foundry test case with incorrect Function declaration"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"func-name-mixedcase"},{"l":"Description","p":["Function name must be in mixedCase."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"func-param-name-mixedcase"},{"l":"Description","p":["Function param name must be in mixedCase."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"modifier-name-mixedcase"},{"l":"Description","p":["Modifier name must be in mixedCase."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"named-parameters-mapping"},{"l":"Description","p":["Solidity v0.8.18 introduced named parameters on the mappings definition."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["To enter \"users\" mapping the key called \"name\" is needed to get the \"balance\"","To enter owner token balance, the main key \"owner\" enters another mapping which its key is \"token\" to get its \"balance\"","Main key of mapping is enforced. On nested mappings other naming are not neccesary","Main key of the parent mapping is enforced. No naming in nested mapping uint256","Main key of the parent mapping is enforced. No naming in nested mapping address"]},{"l":"Bad","p":["No naming at all in regular mapping","Missing any variable name in regular mapping uint256","Missing any variable name in regular mapping address","No MAIN KEY naming in nested mapping. Other naming are not enforced"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"private-vars-leading-underscore"},{"l":"Description","p":["Non-external functions and state variables should start with a single underscore. Others, shouldn't"]},{"l":"Options","p":["description","default","A JSON object with a single property \"strict\" specifying if the rule should apply to ALL non state variables. Default: .","{\"strict\":false}"]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["Internal function with correct naming","Private function with correct naming","Internal state variable with correct naming","Internal state variable with correct naming (no visibility is considered internal)"]},{"l":"Bad","p":["Internal function with incorrect naming","Private function with incorrect naming","Internal state variable with incorrect naming","Internal state variable with incorrect naming (no visibility is considered internal)"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"use-forbidden-name"},{"l":"Description","p":["Avoid to use letters 'I', 'l', 'O' as identifiers."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"var-name-mixedcase"},{"l":"Description","p":["Variable name must be in mixedCase. (Does not check IMMUTABLES, use immutable-vars-naming)"]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"import-on-top"},{"l":"Description","p":["Import statements must be on top."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"ordering"},{"l":"Description","p":["Check order of elements in file and inside each contract, according to the style guide."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"visibility-modifier-order"},{"l":"Description","p":["Visibility modifier must be first in list of modifiers."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"avoid-tx-origin"},{"l":"Description","p":["Avoid to use tx.origin."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"func-visibility"},{"l":"Description","p":["Explicitly mark visibility in function."]},{"l":"Options","p":["description","default","A JSON object with a single property \"ignoreConstructors\" specifying if the rule should ignore constructors. (Note: This is required to be true for Solidity >=0.7.0 and false for <0.7.0)","{\"ignoreConstructors\":false}"]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["Functions explicitly marked with visibility"]},{"l":"Bad","p":["Functions without explicitly marked visibility"]},{"l":"References","p":["Rule source","Test"]}],[{"l":"no-inline-assembly"},{"l":"Description","p":["Avoid to use inline assembly. It is acceptable only in rare cases."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"not-rely-on-time"},{"l":"Description","p":["Avoid making time-based decisions in your business logic."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["This rule does not have good examples."]},{"l":"Bad","p":["This rule does not have bad examples."]},{"l":"References","p":["Rule source","Test"]}],[{"l":"state-visibility"},{"l":"Description","p":["Explicitly mark visibility of state."]},{"l":"Options","p":["This rule does not require any options."]},{"l":"Example Config"},{"l":"Examples"},{"l":"Good","p":["State explicitly marked with visibility"]},{"l":"Bad","p":["Functions without explicitly marked visibility"]},{"l":"References","p":["Rule source","Test"]}]]